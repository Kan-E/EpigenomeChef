digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 2, vjustvar = 2)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("Kolmogorov-Smirnov Tests ", "\npvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\npvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 2, vjustvar = 2)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("Kolmogorov-Smirnov Tests ", "\npvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\npvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 1, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("Kolmogorov-Smirnov Tests ", "\npvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\npvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 0, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("Kolmogorov-Smirnov Tests ", "\npvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\npvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 1.4, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("Kolmogorov-Smirnov Tests ", "\npvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\npvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 0, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0))
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("/n Kolmogorov-Smirnov Tests ", "\n pvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\n pvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 0, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
integrate_ChIP_RNA <- function (result_geneRP, result_geneDiff, lfc_threshold = 1,
padj_threshold = 0.05) {
if ("GRanges" %in% class(result_geneRP)) {
stop("sorry, please use the the simplify result or metadata(fullRP_hit)$peakRP_gene",
call. = FALSE)
}
merge_result <- dplyr::left_join(result_geneRP, result_geneDiff,
by = "gene_id")
allGenes_N <- as.double(nrow(merge_result))
merge_result <- merge_result %>% dplyr::mutate(diff_rank = rank(padj,
na.last = "keep"), diff_rank = dplyr::case_when(is.na(diff_rank) ~
allGenes_N, TRUE ~ diff_rank), rankProduct = RP_rank *
diff_rank, rankOf_rankProduct = rank(rankProduct)) %>%
dplyr::arrange(rankOf_rankProduct) %>% dplyr::mutate(gene_category = dplyr::case_when(log2FoldChange >
lfc_threshold & padj < padj_threshold ~ "up", log2FoldChange <
-lfc_threshold & padj < padj_threshold ~ "down", TRUE ~
"static"), gene_category = factor(gene_category, levels = c("up",
"down", "static")))
upGenes_rank <- filter(merge_result, gene_category == "up")$RP_rank
downGenes_rank <- filter(merge_result, gene_category == "down")$RP_rank
staticGenes_rank <- filter(merge_result, gene_category ==
"static")$RP_rank
if (length(upGenes_rank) == 0 & length(downGenes_rank) ==
0) {
warning("no significant genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(upGenes_rank) == 0) {
warning("no significant up genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
else if (length(downGenes_rank) == 0) {
warning("no significant down genes, just returing rank product result",
call. = FALSE)
return(merge_result)
}
up_static_pvalue <- suppressWarnings(ks.test(upGenes_rank,
staticGenes_rank)$p.value)
down_static_pvalue <- suppressWarnings(ks.test(downGenes_rank,
staticGenes_rank)$p.value)
ks_test <- paste0("\n Kolmogorov-Smirnov Tests ", "\n pvalue of up vs static: ",
format(up_static_pvalue, digits = 3, scientific = TRUE),
"\n pvalue of down vs static: ", format(down_static_pvalue,
digits = 3, scientific = TRUE))
annotate_df <- data.frame(xpos = -Inf, ypos = Inf, annotateText = ks_test,
hjustvar = 0, vjustvar = 1)
p <- merge_result %>% ggplot2::ggplot(aes(x = RP_rank)) +
ggplot2::stat_ecdf(aes(color = gene_category), geom = "line") +
ggplot2::geom_text(data = annotate_df, aes(x = xpos,
y = ypos, hjust = hjustvar, vjust = vjustvar, label = annotateText)) +
ggplot2::xlab("Regulatory potential rank") + ggplot2::ylab("Cumulative Probability")+
ggplot2::scale_x_continuous(expand = c(0,0)) + ggplot2::theme_bw()
return(p)
}
merge_data <- integrate_ChIP_RNA(
result_geneRP = result_geneRP,
result_geneDiff = data,lfc_threshold = 1,padj_threshold = 0.05
)
merge_data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
genes <- GRanges(seqnames=c("3R", "X"),
ranges=IRanges(start=c(19967117, 18962306),
end=c(19973212, 18962925)),
strand=c("+", "-"),
seqlengths=c(`3R`=27905053L, `X`=22422827L))
genes
c(genes,genes)
runApp()
library(Gviz)
data(cpgIslands)
chr <- as.character(unique(seqnames(cpgIslands)))
gen <- genome(cpgIslands)
atrack <- AnnotationTrack(cpgIslands, name="CpG")
itrack <- IdeogramTrack(genome=gen, chromosome=chr)
set.seed(255)
lim <- c(26700000, 26750000)
coords <- sort(c(lim[1], sample(seq(from=lim[1], to=lim[2]), 99), lim[2]))
dat <- runif(100, min=-10, max=10)
dtrack <- DataTrack(data=dat, start=coords[-length(coords)], end=coords[-1], chromosome=chr, genome=gen, name="Uniform")
data(geneModels)
grtrack <- GeneRegionTrack(geneModels, genome=gen, chromosome=chr, name="foo")
gtrack <- GenomeAxisTrack()
## two highlight tracks with two/three highlighted regions
ht1 <- HighlightTrack(trackList=list(itrack, gtrack, atrack), start=c(26705000, 26720000), width=7000, chromosome=7, col=c("#E41A1C", "#377EB8"), fill=c("#FBB4AE", "#B3CDE3"))
ht2 <- HighlightTrack(trackList=dtrack, start=c(26705000, 26720000, 26735000), width=7000, chromosome=7, col=c("#E41A1C", "#377EB8", "#4DAF4A"), fill=c("#FBB4AE", "#B3CDE3", "#CCEBC5"))
##
plotTracks(list(ht1, grtrack, ht2), from=lim[1], to=lim[2])
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
promoters(genes(TxDb.Hsapiens.UCSC.hg19.knownGene),upstream = 500, downstream = 500)
data<- promoters(genes(TxDb.Hsapiens.UCSC.hg19.knownGene),upstream = 500, downstream = 500)
head(data)
data2 <- as.data.frame(data2)
data2 <- as.data.frame(data)
head(data2)
dim(data2)
data3 <- data2 %>% distinct(start, .keep_all = T)
dim(data2)
dim(data3)
runApp()
