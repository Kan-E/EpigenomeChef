data$x <- gsub(":","", data$x)
data <- dplyr::arrange(data, x)
idx <- order(data[["x"]], decreasing = FALSE)
data$id <- factor(data$id,
levels=rev(unique(data$id[idx])))
p1 <- as.grob(ggplot(data, aes_string(x = "Group",y= "id",color="p_adjust_hyper",size="fold_enrichment_hyper"))+
geom_point() +
scale_color_continuous(low="red", high="blue",
guide=guide_colorbar(reverse=TRUE)) +
scale_size(range=c(1, 6))+ theme_dose(font.size=12)+ylab(NULL)+xlab(NULL) +
scale_y_discrete(labels = label_wrap_gen(30)) + scale_x_discrete(position = "top"))
}}else p1 <- NULL
data$id <- gsub("_", " ", data$id)
data <- dplyr::mutate(data, x = paste0(Group, 1/(-log10(eval(parse(text = "p_adjust_hyper"))))))
data$x <- gsub(":","", data$x)
data <- dplyr::arrange(data, x)
idx <- order(data[["x"]], decreasing = FALSE)
data$id <- factor(data$id,
levels=rev(unique(data$id[idx])))
p1 <- as.grob(ggplot(data, aes_string(x = "Group",y= "id",color="p_adjust_hyper",size="fold_enrichment_hyper"))+
geom_point() +
scale_color_continuous(low="red", high="blue",
guide=guide_colorbar(reverse=TRUE)) +
scale_size(range=c(1, 6))+ theme_dose(font.size=12)+ylab(NULL)+xlab(NULL) +
scale_y_discrete(labels = label_wrap_gen(30)) + scale_x_discrete(position = "top"))
p1
plot_grid(p1)
data <- data.frame(matrix(rep(NA, 13), nrow=1))[numeric(0), ]
colnames(data) <- c("id", "genome_fraction", "observed_region_hits", "fold_enrichment", "p_value", "p_adjust", "mean_tss_dist",
"observed_gene_hits", "gene_set_size","fold_enrichment_hyper","p_value_hyper","p_adjust_hyper","Group")
for(name in names(df)){
if(!is.null(df[[name]])) {
group1 <- as.data.frame(rGREAT::getEnrichmentTable(df[[name]]))
group1 <- dplyr::filter(group1, p_adjust_hyper =< 0.05)
for(name in names(df)){
if(!is.null(df[[name]])) {
group1 <- as.data.frame(rGREAT::getEnrichmentTable(df[[name]]))
group1 <- dplyr::filter(group1, p_adjust_hyper <= 0.05)
group1$Group <- paste(name, "\n(",length(dplyr::filter(data3, group == name)$group),")",sep = "")
if (length(group1$p_adjust_hyper) > 5){
group1 <- group1[sort(group1$p_adjust_hyper, decreasing = F, index=T)$ix,]
group1 <- group1[1:5,]
}
}else group1 <- NULL
data <- rbind(data, group1)
}
if(length(data$id) != 0){
data["id"] <- lapply(data["id"], gsub, pattern="HALLMARK_", replacement = "")
if ((length(data$id) == 0) || length(which(!is.na(unique(data$p_adjust_hyper))))==0) {
p1 <- NULL
} else{
data$id <- gsub("_", " ", data$id)
data <- dplyr::mutate(data, x = paste0(Group, 1/(-log10(eval(parse(text = "p_adjust_hyper"))))))
data$x <- gsub(":","", data$x)
data <- dplyr::arrange(data, x)
idx <- order(data[["x"]], decreasing = FALSE)
data$id <- factor(data$id,
levels=rev(unique(data$id[idx])))
p1 <- as.grob(ggplot(data, aes_string(x = "Group",y= "id",color="p_adjust_hyper",size="fold_enrichment_hyper"))+
geom_point() +
scale_color_continuous(low="red", high="blue",
guide=guide_colorbar(reverse=TRUE)) +
scale_size(range=c(1, 6))+ theme_dose(font.size=12)+ylab(NULL)+xlab(NULL) +
scale_y_discrete(labels = label_wrap_gen(30)) + scale_x_discrete(position = "top"))
}}else p1 <- NULL
plot_grid(p1)
data <- data.frame(matrix(rep(NA, 9), nrow=1))[numeric(0), ]
colnames(data) <- c("chr", "start", "end", "width", "strand", "ENTREZID", " annotated_genes", "dist_to_TSS", "Group")
rGREAT::getRegionGeneAssociations(res_up, term_id = "HALLMARK_APOPTOSIS")
for(name in names(df)){
if(!is.null(df[[name]])) {
group1 <- as.data.frame(rGREAT::getRegionGeneAssociations(df[[name]], term_id = "HALLMARK_APOPTOSIS"))
group1$Group <- paste(name, "\n(",length(dplyr::filter(data3, group == name)$group),")",sep = "")
}else group1 <- NULL
data <- rbind(data, group1)
}
head(data)
data <- data.frame(matrix(rep(NA, 13), nrow=1))[numeric(0), ]
colnames(data) <- c("id", "genome_fraction", "observed_region_hits", "fold_enrichment", "p_value", "p_adjust", "mean_tss_dist",
"observed_gene_hits", "gene_set_size","fold_enrichment_hyper","p_value_hyper","p_adjust_hyper","Group")
for(name in names(df)){
if(!is.null(df[[name]])) {
group1 <- as.data.frame(rGREAT::getEnrichmentTable(df[[name]]))
group1 <- dplyr::filter(group1, p_adjust_hyper <= 0.05)
group1$Group <- paste(name, "\n(",length(dplyr::filter(data3, group == name)$group),")",sep = "")
if (length(group1$p_adjust_hyper) > 5){
group1 <- group1[sort(group1$p_adjust_hyper, decreasing = F, index=T)$ix,]
group1 <- group1[1:5,]
}
}else group1 <- NULL
data <- rbind(data, group1)
}
id_list <- unique(data$id)
head(id_list)
df = read.table(url("https://jokergoo.github.io/rGREAT_suppl/data/GREATv4.genes.hg19.tsv"))
# note there must be a 'gene_id' column
tss = GRanges(seqnames = df[, 2], ranges = IRanges(df[, 3], df[, 3]),
strand = df[, 4])
head(tss)
et = extendTSS(tss, genome = "hg19", gene_id_type = "SYMBOL")
et = rGREAT::extendTSS(tss, genome = "hg19", gene_id_type = "SYMBOL")
H_t2g <- msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, entrez_gene, gs_id, gs_description)
head(H_t2g)
a <- dplyr::filter(H_t2g, gs_name == "HALLMARK_ADIPOGENESIS")
head(a)
b <- list()
b[["HALLMARK_ADIPOGENESIS"]] <- a$entrez_gene
head(b)
df <- list()
set <- unique(H_t2g$gs_name)
for(name in set){
data <- dplyr::filter(H_t2g, gs_name == name)
df[[name]] <- data$entrez_gene
}
head(df)
great(data_degcount_down3, gs, "hg19")
rGREAT::great(data_degcount_down3, gs, "hg19")
rGREAT::great(data_degcount_down3, df, "hg19")
rGREAT::getEnrichmentTable(rGREAT::great(data_degcount_down3, df, "hg19"))
runApp('Desktop/Rproject/名称未設定フォルダ')
head(data_degcount_up2)
head(data_degcount2_anno)
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
dim(data_degcount_up)
runApp('Desktop/Rproject/名称未設定フォルダ')
head(deg_result_anno2)
runApp('Desktop/Rproject/名称未設定フォルダ')
data_degcount_up2 <- dplyr::filter(data3, locus %in% rownames(data_degcount_up))
data_degcount_up2 <- dplyr::filter(deg_result_anno2, locus %in% rownames(data_degcount_up))
head(data_degcount_up2)
data_degcount_up3 <- with(data_degcount_up2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end),
ENTREZID = geneId))
print(data_degcount_up3)
runApp('Desktop/Rproject/名称未設定フォルダ')
H_t2g <- GeneList_for_enrichment(Species = "Homo Sapiens (hg19)", Gene_set = MSigDB Hallmark, org = org.Hs.eg.db)
H_t2g <- GeneList_for_enrichment(Species = "Homo Sapiens (hg19)", Gene_set = "MSigDB Hallmark", org = org.Hs.eg.db)
H_t2g <- GeneList_for_enrichment(Species = "Homo sapiens (hg19)", Gene_set = "MSigDB Hallmark", org = org.Hs.eg.db)
head(H_t2g)
runApp('Desktop/Rproject/名称未設定フォルダ')
res_up = rGREAT::great(data_degcount_up3,gene_list_for_enrichment_genome(H_t2g), txdb())
res_up = rGREAT::great(data_degcount_up3,gene_list_for_enrichment_genome(H_t2g), txdb_function(Species = "Homo sapiens (hg19)"))
res_up = rGREAT::great(data_degcount_up3,gene_list_for_enrichment_genome(H_t2g), TxDb.Hsapiens.UCSC.hg19.knownGene))
res_up = rGREAT::great(data_degcount_up3,gene_list_for_enrichment_genome(H_t2g), TxDb.Hsapiens.UCSC.hg19.knownGene)
res_up = rGREAT::great(data_degcount_up3, as.numeric(gene_list_for_enrichment_genome(H_t2g)), TxDb.Hsapiens.UCSC.hg19.knownGene)
class(gene_list_for_enrichment_genome(H_t2g))
df <- gene_list_for_enrichment_genome(H_t2g)
head(df)
rGREAT::great(data_degcount_down3, df, "hg19")
head(df)
class(df["Apical_surface"])
df["Apical_surface"]
df <- list()
set <- unique(H_t2g$gs_name)
for(name in set){
data <- dplyr::filter(H_t2g, gs_name == name)
df[[name]] <- data$entrez_gene
}
rGREAT::great(data_degcount_down3, df, "hg19")
head(H_t2g)
H_t2g <- GeneList_for_enrichment(Species = "Homo sapiens (hg19)", Gene_set = "MSigDB Hallmark", org = org.Hs.eg.db)
head(H_t2g)
df <- list()
set <- unique(H_t2g$gs_name)
for(name in set){
data <- dplyr::filter(H_t2g, gs_name == name)
df[[name]] <- data$entrez_gene
}
rGREAT::great(data_degcount_down3, df, "hg19")
res_up = rGREAT::great(data_degcount_up3, as.numeric(gene_list_for_enrichment_genome(H_t2g)), TxDb.Hsapiens.UCSC.hg19.knownGene)
res_up = rGREAT::great(data_degcount_up3, gene_list_for_enrichment_genome(H_t2g), TxDb.Hsapiens.UCSC.hg19.knownGene)
traceback()
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets = gene_list_for_enrichment_genome(H_t2g),txdb())
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets = gene_list_for_enrichment_genome(H_t2g),TxDb.Hsapiens.UCSC.hg19.knownGene)
gene_sets = gene_list_for_enrichment_genome(H_t2g)
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets,TxDb.Hsapiens.UCSC.hg19.knownGene)
df <- list()
set <- unique(H_t2g$gs_name)
for(name in set){
data <- dplyr::filter(H_t2g, gs_name == name)
df[[name]] <- data$entrez_gene
}
data_degcount_up2 <- dplyr::filter(data3, locus %in% rownames(data_degcount_up()))
res_up = rGREAT::great(data_degcount_up3,df,txdb())
rGREAT::great(data_degcount_down3, df, "hg19")
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets,TxDb.Hsapiens.UCSC.hg19.knownGene)
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets,"TxDb.Hsapiens.UCSC.hg19.knownGene")
runApp('Desktop/Rproject/名称未設定フォルダ')
res_up = rGREAT::great(gr = data_degcount_up3,gene_sets,tss_source = "TxDb.Hsapiens.UCSC.hg19.knownGene")
runApp('Desktop/Rproject/名称未設定フォルダ')
input$txdb <-TxDb.Hsapiens.UCSC.hg19.knownGene
"input$txdb"
eval(parse(text = "input$txdb"))
parse(text = "input$txdb")
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
runApp('Desktop/Rproject/名称未設定フォルダ')
df
res_down
rGREAT::plotRegionGeneAssociations(res_down)
runApp('Desktop/Rproject/名称未設定フォルダ')
rGREAT::getRegionGeneAssociations(res_up, term_id = "HALLMARK_APOPTOSIS")
rGREAT::getRegionGeneAssociations(res_down, term_id = "HALLMARK_APOPTOSIS")
rGREAT::getRegionGeneAssociations(res_down, term_id = "HALLMARK_APOPTOSIS") %>% as.data.frame %>% head()
runApp('Desktop/Rproject/名称未設定フォルダ')
savehistory("~/epigenomeChef.Rhistory")
save.image("~/epigenomeChef.RData")
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
load("~/epigenomeChef.RData")
tax <- 10090
tax <- 9606
library(BSgenome.Hsapiens.UCSC.hg19)
genome = BSgenome.Hsapiens.UCSC.hg19
pwms <- getMatrixSet(JASPAR2020,
opts = list(matrixtype = "PWM",
tax_group = "vertebrates",
species = tax
))
library(JASPAR2020)
a <- deg_result_anno2 %>% dplyr::filter(locus %in% rownames(data_degcount_down))
head(a)
y <- with(a, GRanges(seqnames = seqnames,
ranges = IRanges(start,end)))
head(y)
seq <- getSeq(genome, y)
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
pwms <- getMatrixSet(JASPAR2020,
opts = list(matrixtype = "PWM",
tax_group = "vertebrates",
species = tax
))
pwms <- TFBSTools::getMatrixSet(JASPAR2020,
opts = list(matrixtype = "PWM",
tax_group = "vertebrates",
species = tax
))
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
res <- data.frame(motif.id = elementMetadata(se)$motif.id, motif.name = elementMetadata(se)$motif.name,
motif.percentGC = elementMetadata(se)$motif.percentGC,
negLog10P = assay(se,"negLog10P"),negLog10Padj = assay(se,"negLog10Padj"),
log2enr = assay(se,"log2enr"),pearsonResid = assay(se,"pearsonResid"),
expForegroundWgtWithHits = assay(se,"expForegroundWgtWithHits"),
sumForegroundWgtWithHits = assay(se,"sumForegroundWgtWithHits"),
sumBackgroundWgtWithHits = assay(se,"sumBackgroundWgtWithHits"))
head(res)
res <- dplyr::filter(res, X1 > -log10(0.05))
head(res)
res
runApp('Desktop/Rproject/名称未設定フォルダ')
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
head(seq)
pwms
pwms("Homo sapiens (hg19)")
pwms <- pwms("Homo sapiens (hg19)")
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
df <- list()
df[["Up"]] <- data_degcount_up
df[["Down"]] <- data_degcount_down
head(df)
group_file <- names(df)
perc <- 0
df2 <- list()
perc <- perc + 1
data <- df[[name]]
data2 <- deg_result_anno2 %>% dplyr::filter(locus %in% rownames(data))
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end)))
seq <- getSeq(genome, y)
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
head(data2)
names(df)
name <- "Up"
perc <- perc + 1
data <- df[[name]]
data2 <- anno_data %>% dplyr::filter(locus %in% rownames(data))
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end)))
data2 <- deg_result_anno2 %>% dplyr::filter(locus %in% rownames(data))
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end)))
seq <- getSeq(genome, y)
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
anno_data <- deg_result_anno2
for(name in names(df)){
perc <- perc + 1
data <- df[[name]]
data2 <- anno_data %>% dplyr::filter(locus %in% rownames(data))
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end)))
seq <- getSeq(genome, y)
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
res <- data.frame(motif.id = elementMetadata(se)$motif.id, motif.name = elementMetadata(se)$motif.name,
motif.percentGC = elementMetadata(se)$motif.percentGC,
negLog10P = assay(se,"negLog10P"),negLog10Padj = assay(se,"negLog10Padj"),
log2enr = assay(se,"log2enr"),pearsonResid = assay(se,"pearsonResid"),
expForegroundWgtWithHits = assay(se,"expForegroundWgtWithHits"),
sumForegroundWgtWithHits = assay(se,"sumForegroundWgtWithHits"),
sumBackgroundWgtWithHits = assay(se,"sumBackgroundWgtWithHits"),
Group = name)
df2[[name]] <- res
}
runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/名称未設定フォルダ')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
promoters(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), upstream = 500, downstream = 500)
y <- subset(promoters(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), upstream = 500, downstream = 500), gene_id %in% c(1,3,5))
y
seq <- getSeq(genome, y)
seq <- getSeq(BSgenome.Hsapiens.UCSC.hg19, y)
seq
load("~/epigenomeChef.RData")
genome = BSgenome.Hsapiens.UCSC.hg19
data <- df[["Up"]]
head(dta)
head(data)
df= preMotif_list
df <- list()
df[["Up"]] <- data_degcount_up
df[["Down"]] <- data_degcount_down
preMotif_list <-df
data<-df[["Up"]]
anno_data
anno_data <- deg_result_anno2
data2 <- anno_data %>% dplyr::filter(locus %in% rownames(data))
head(data2)
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end),
gene_id = geneId))
head(y)
seq <- getSeq(genome, y)
seq
seqnames(x)
seqnames(genome)
as.character(y$gene_id)
is.character(y$gene_id)
y <- subset(promoters(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), upstream = 500, downstream = 500), gene_id %in% c(1,3,5))
is.character(y$gene_id)
seq <- getSeq(genome, y)
seq
y <- with(data2, GRanges(seqnames = seqnames,
ranges = IRanges(start,end),
gene_id = geneId))
Biostrings::BString(y)
BSgenome-class
BSgenome-class(y)
head(data2)
seq <- getSeq(genome, y)
names(seq)<- y$gene_id
head(seq)
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
load("~/epigenomeChef.RData")
head(deg_result_anno2)
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
load("~/epigenomeChef.RData")
head(data_degcount2)
shiny::runApp('Desktop/Rproject/RNAseqChef_imeg')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_imeg')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
library(colorspace)
par(mar=c(0,0,0,0))
plot(NULL, xlim=c(0,7), ylim=c(0,2),
axes=FALSE, xlab="", ylab="")
rect(0:6, 1.1, 1:7, 2, col=rainbow(7))
rect(0:1, 1.1, 1:2, 2, col=rainbow(2))
plot(NULL, xlim=c(0,7), ylim=c(0,2),
axes=FALSE, xlab="", ylab="")
rect(0:6, 1.1, 1:7, 2, col=rainbow(7))
par(mar=c(0,0,0,0))
rect(0:1, 1.1, 1:2, 2, col=rainbow(2))
rect(0:1, 1.1, 1:2, 2, col=rainbow(2))
par(mar=c(0,0,0,0))
rect(0:1, 1.1, 1:2, 2, col=rainbow(2))
barplot(rep(1,8), col=palette(), axes=FALSE)
barplot(rep(1,2), col=rainbow(7), axes=FALSE)
barplot(rep(1,3), col=rainbow(7), axes=FALSE)
barplot(rep(1,2), col=rainbow(2), axes=FALSE)
barplot(rep(1,3), col=rainbow(3), axes=FALSE)
barplot(rep(1,4), col=rainbow(4), axes=FALSE)
barplot(rep(1,10), col=rainbow(10), axes=FALSE)
barplot(rep(1,20), col=rainbow(20), axes=FALSE)
barplot(rep(1,30), col=rainbow(30), axes=FALSE)
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
rainbow_hcl()
library(Gviz)
gen <- "hg19"
chr <- "chr21"
start <- 45000000
end <- 46000000
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb_hg19 <- TxDb.Hsapiens.UCSC.hg19.knownGene
txTranscripts_v1 <- GeneRegionTrack(txdb_hg19, genome="hg19", chromosome="chr21", showId=TRUE, geneSymbol=TRUE, name="UCSC")
plotTracks(txTranscripts_v1, from=start, to=end)
symbols <- unlist(mapIds(org.Hs.eg.db, gene(txTranscripts_v1), "SYMBOL", "ENTREZID", multiVals = "first"))
library(org.Hs.eg.db)
symbols <- unlist(mapIds(org.Hs.eg.db, gene(txTranscripts_v1), "SYMBOL", "ENTREZID", multiVals = "first"))
symbol(txTranscripts_v1) <- symbols[gene(txTranscripts_v1)]
plotTracks(txTranscripts_v1, from=start, to=end)
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
rtracklayer::import("/Users/kanetoh/Downloads/Up-DAR (1).bed")
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
-4.555e+00
-4.292e+01
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
install.packages("GenomicInteractions")
library(GenomicInteractions)
hic_file <- system.file("extdata", "Seitan2013_WT_100kb_interactions.txt",
package="GenomicInteractions")
head(hic_file)
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
runApp('Desktop/Rproject/EpigenomeChef')
t<-NULL
y<-NULL
runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
shiny::runApp('Desktop/Rproject/EpigenomeChef')
